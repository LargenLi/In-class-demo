# Random Forest
```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```
```{r}
library(tidyverse)
library(readr)
library(rpart)
library(rpart.plot)
library(pdp)
library(randomForest)
library(vip)
library(reshape2)
```
```{r}
df = read_csv("cleaned_telco_data.csv")
```
```{r}
tree_model = rpart(churn_value ~ ., data = df, method = "class", cp = 0.01)

rpart.plot(tree_model, extra = 1)
```



```{r}
# Fit a Random Forest model
set.seed(123)
df$churn_value = as.factor(df$churn_value)

colnames(df) = make.names(colnames(df))
rf_model = randomForest(churn_value ~ ., data = df, importance = TRUE)

```

```{r}
# Get Gini importance from the RF model
gini_df = as.data.frame(importance(rf_model)) |>
  rownames_to_column("Feature") |>
  arrange(desc(MeanDecreaseGini))  # sort by importance

# Plot with ggplot2
ggplot(gini_df, aes(x = reorder(Feature, MeanDecreaseGini), y = MeanDecreaseGini)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(
    title = "Variable Importance (Gini Index)",
    x = "Feature",
    y = "Mean Decrease in Gini"
  ) +
  theme_minimal(base_size = 12)

```


```{r}
train_x = df[, setdiff(names(df), "churn_value")]

var = colnames(train_x)

pdp_df = map(var, function(x)partial(rf_model,pred.var = x))|>
  map_dfr(pivot_longer, cols =1)

pdp_importance <- pdp_df %>%
  group_by(name) %>%
  summarise(pdp_sd = sd(yhat), .groups = "drop")

# Step 4: Join and reorder factor levels
pdp_df <- pdp_df %>%
  left_join(pdp_importance, by = "name") %>%
  arrange(desc(pdp_sd))
```
```{r}
# Step 5: Plot
ggplot(pdp_df, aes(x = value, y = yhat)) +
  geom_line(color = "steelblue") +
  facet_wrap(~ name, scales = "free_x") +
  labs(
    title = "Partial Dependence Plots Ordered by PDP Effect Size (sd of yhat)",
    x = "Feature Value",
    y = "Predicted Churn Probability"
  ) +
  theme_minimal(base_size = 12)
```
```{r}
ggplot(pdp_importance, aes(x = reorder(name, pdp_sd), y = pdp_sd)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(
    title = "Stdv. of y hat",
    x = "Name",
    y = "sd(yhat)"
  ) +
  theme_minimal(base_size = 12)
```
```{r}
is_binary <- function(x) length(unique(x)) == 2 && all(unique(x) %in% c(0, 1))

continuous_vars <- train_x %>%
  select(where(~ !is_binary(.))) %>%
  colnames()

con_df = map(continuous_vars, function(x)partial(rf_model,pred.var = x))|>
  map_dfr(pivot_longer, cols =1)

con_importance <- con_df %>%
  group_by(name) %>%
  summarise(pdp_sd = sd(yhat), .groups = "drop")

# Step 4: Join and reorder factor levels
con_df <- con_df %>%
  left_join(con_importance, by = "name") %>%
  arrange(desc(pdp_sd))
```
```{r}
# Step 5: Plot
ggplot(con_df, aes(x = value, y = yhat)) +
  geom_line(color = "steelblue") +
  facet_wrap(~ name, scales = "free_x") +
  labs(
    title = "Partial Dependence Plots for Contin",
    x = "Feature Value",
    y = "Predicted Churn Probability"
  ) +
  theme_minimal(base_size = 12)

```
```{r}
# Define prediction wrapper to return predicted class labels
pred_class = function(object, newdata) {
  factor(predict(object, newdata = newdata, type = "response"), levels = c(0, 1))
}

# Generate VIP plot using accuracy
vip(rf_model,
    method = "permute",
    train = train_x,                
    target = df$churn_value,           
    metric = "accuracy",               
    pred_wrapper = pred_class,        
    nsim = 10,                  
    num_features = ncol(train_x))     
```
```{r}
# Generate VIP plot using roc
vip(rf_model,
    method = "permute",
    train = train_x,
    target = df$churn_value,
    metric = "roc_auc",
    pred_wrapper = function(object, newdata) {
      predict(object, newdata = newdata, type = "prob")[, "1"]
    },
    nsim = 10,
    num_features = ncol(train_x))

```

```{r}

train_x = df[, setdiff(names(df), "churn_value")]

# Generate VIP plot using roc
vip(rf_model,
    method = "permute",
    train = train_x,
    target = df$churn_value,
    metric = "roc_auc",
    event_level = "second",
    pred_wrapper = function(object, newdata) {
      predict(object, newdata = newdata, type = "prob")[, "1"]
    },
    nsim = 10,
    num_features = ncol(train_x))

```

```{r}
# ---- Gini Importance ----
gini_df = as.data.frame(importance(rf_model)) |>
  rownames_to_column("Feature") |>
  select(Feature, Gini = MeanDecreaseGini)

# ---- ROC AUC Permutation ----
roc_vi = vi(
  rf_model,
  method = "permute",
  train = train_x,
  target = df$churn_value,
  metric = "roc_auc",
  event_level = "second",
  pred_wrapper = function(object, newdata) {
    predict(object, newdata = newdata, type = "prob")[, "1"]
  },
  nsim = 10
) |> select(Feature = Variable, ROC_AUC = Importance)

# ---- Accuracy Permutation ----
pred_class = function(object, newdata) {
  factor(predict(object, newdata, type = "response"), levels = c(0, 1))
}

acc_vi = vi(
  rf_model,
  method = "permute",
  train = train_x,
  target = df$churn_value,
  metric = "accuracy",
  pred_wrapper = pred_class,
  nsim = 10
) |> select(Feature = Variable, Accuracy = Importance)

# ---- Merge All ----
vi_comparison = reduce(list(gini_df, roc_vi, acc_vi), full_join, by = "Feature") |>
  arrange(desc(Gini))
```
```{r}
# ---- Plot ----
vi_long = vi_comparison |>
  pivot_longer(cols = -Feature, names_to = "Metric", values_to = "Importance")

```
```{r}
ggplot(vi_long, aes(x = reorder(Feature, Importance), y = Importance)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  facet_wrap(~ Metric, scales = "free_x") +
  labs(
    title = "Feature Importance by Metric",
    x = "Feature",
    y = "Importance"
  ) +
  theme_minimal(base_size = 12)

```
```{r}
vi_corr = vi_comparison |>
  select(-Feature) |>
  cor(use = "complete.obs")

# Convert to long format for ggplot2
vi_corr_long = melt(vi_corr)

# Plot heatmap
ggplot(vi_corr_long, aes(x = Var1, y = Var2, fill = value)) +
  geom_tile(color = "white") +
  geom_text(aes(label = round(value, 2)), color = "black", size = 5) +
  scale_fill_gradient2(low = "steelblue", high = "darkred", mid = "white",
                       midpoint = 0.5, limit = c(0, 1), space = "Lab",
                       name = "Correlation") +
  theme_minimal(base_size = 14) +
  labs(title = "Correlation of Feature Importance Metrics",
       x = "", y = "") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
```

